generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

enum LeaveType {
  Annual
  Medical
  Maternity
  Unpaid
  Duty
  BroughtForward
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  hashedPassword String?
  role           UserRole   @default(USER)
  username       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
}

model Department {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  managerId   String?    @db.ObjectId
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[] @relation("DepartmentEmployees")
  manager     Employee?  @relation(fields: [managerId], references: [id])
}

model Employee {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  workEmail             String    @unique
  position              String
  workMobile            String
  personalMobile        String
  jobPosition           String
  profile_photo         String
  workAddress           String?
  workLocation          String?
  workingHours          String?
  startDate             DateTime?
  timeZone              String?
  privateAddress        String?
  personalEmail         String?
  phone                 String?
  bankAccountNumber     String?
  bankName              String?
  maritalStatus         String?
  numberOfDependents    Int?      @default(0)
  emergencyContactName  String?
  emergencyContactPhone String?
  nationality           String?
  idNumber              String?
  gender                String?
  dateOfBirth           DateTime?
  employeeType          String?
  idCopy                String?
  resumeCopy            String?
  passbookCopy          String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  departmentId       String?        @db.ObjectId
  employeeDepartment Department?    @relation("DepartmentEmployees", fields: [departmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Attendance         Attendance[]
  Department         Department[]
  Leave              Leave[]
  LeaveBalance       LeaveBalance[]
  Payroll            Payroll[]
}

model Attendance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime?
  timeIn     DateTime?
  timeOut    DateTime?
  totalHours String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model LeaveBalance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  leaveType  LeaveType
  balance    Int
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Leave {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  type       LeaveType
  startDate  DateTime?
  endDate    DateTime?
  reason     String?
  status     LeaveStatus? @default(Pending)
  medical    String?
  approvedBy String?
  approvedAt DateTime?
  rejectedBy String?
  rejectedAt DateTime?
  remarks    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model Payroll {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  month                  String
  year                   String
  basicSalary            Float
  dataAllowance          Float
  mobileAllowance        Float?
  projectAllowances      Float?
  performanceAllowance   Float?
  holidayAllowance       Float?
  otherAllowances        Float?
  salaryAdvance          Float?
  epfDeduction           Float
  etfDeduction           Float
  companyEpfContribution Float
  companyEtfContribution Float
  otherDeductions        Float?
  netSalary              Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}
