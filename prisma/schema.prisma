generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  hashedPassword String?
  role           UserRole   @default(USER)
  username       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
}

model Department {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  manager     Employee?      @relation(fields: [managerId], references: [id])
  managerId   String        @db.ObjectId
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  employees   Employee[]    @relation("DepartmentEmployees")
  jobPosition jobPosition[]
}

model Employee {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  workEmail             String   @unique
  position              String
  workMobile            String
  personalMobile        String
  jobPosition           String
  profile_photo         String
  workAddress           String?
  workLocation          String?
  workingHours          String?
  startDate             DateTime?
  timeZone              String?
  privateAddress        String?
  personalEmail         String?
  phone                 String?
  bankAccountNumber     String?
  bankName              String?
  maritalStatus         String?
  numberOfDependents    Int?     @default(0)
  emergencyContactName  String?
  emergencyContactPhone String?
  nationality           String?
  idNumber              String?
  gender                String?
  dateOfBirth           DateTime?
  employeeType          String?
  idCopy                String?
  resumeCopy            String?
  passbookCopy          String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  departments        Department[]
  departmentId       String?      @db.ObjectId
  employeeDepartment Department?  @relation("DepartmentEmployees", fields: [departmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Attendance         Attendance[]
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      String
  timeIn    String
  timeOut   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @db.ObjectId
}

model jobPosition {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  departmentId String?     @db.ObjectId
  department   Department? @relation(fields: [departmentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
