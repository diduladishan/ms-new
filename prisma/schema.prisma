generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  hashedPassword String?
  role           UserRole   @default(USER)
  username       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
}

model Department {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  managerId   String?    @db.ObjectId
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[] @relation("DepartmentEmployees")
  manager     Employee?  @relation(fields: [managerId], references: [id])
}

model Employee {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  workEmail             String    @unique
  position              String
  workMobile            String
  personalMobile        String
  jobPosition           String
  profile_photo         String
  workAddress           String?
  workLocation          String?
  workingHours          String?
  startDate             DateTime?
  timeZone              String?
  privateAddress        String?
  personalEmail         String?
  phone                 String?
  bankAccountNumber     String?
  bankName              String?
  maritalStatus         String?
  numberOfDependents    Int?      @default(0)
  emergencyContactName  String?
  emergencyContactPhone String?
  nationality           String?
  idNumber              String?
  gender                String?
  dateOfBirth           DateTime?
  employeeType          String?
  idCopy                String?
  resumeCopy            String?
  passbookCopy          String?
  employeeNumber        String?
  basicSalary            Float?
  dataAllowance          Float?
  mobileAllowance        Float?
  performanceAllowance   Float?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  departmentId       String?       @db.ObjectId
  employeeDepartment Department?   @relation("DepartmentEmployees", fields: [departmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Attendance         Attendance[]
  Department         Department[]
  Leave              Leave[]
  leaveBalance       LeaveBalance? @relation(fields: [leaveBalanceId], references: [id])
  leaveBalanceId     String?       @db.ObjectId
  Payroll            Payroll[]
}

model Attendance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime?
  timeIn     DateTime?
  timeOut    DateTime?
  totalHours String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model LeaveBalance {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  annual         Int      @default(0)
  casual         Int      @default(0)
  medical        Int      @default(0)
  unpaid         Int      @default(0)
  broughtForward Int      @default(0)
  duty           Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  employeeId String     @db.ObjectId
  Employee   Employee[]
}

model Leave {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  startDate  DateTime?
  endDate    DateTime?
  reason     String?
  status     LeaveStatus? @default(Pending)
  medical    String?
  approvedBy String?
  approvedAt DateTime?
  rejectedBy String?
  rejectedAt DateTime?
  remarks    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}

model Payroll {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  // month                  String
  // year                   String
  monthYear              String
  basicSalary            Float
  dataAllowance          Float
  mobileAllowance        Float?
  projectAllowance       Float?
  performanceAllowance   Float?
  holidayAllowance       Float?
  otherAllowances        Float?
  salaryAdvance          Float?
  epfDeduction           Float
  companyEpfContribution Float
  companyEtfContribution Float
  otherDeductions        Float?
  totalDeductions        Float
  totalEarnings          Float
  netSalary              Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
}
